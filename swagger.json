{
  "openapi": "3.0.1",
  "info": {
    "title": "Trading212 Public API",
    "version": "v0"
  },
  "servers": [
    {
      "url": "https://demo.trading212.com"
    },
    {
      "url": "https://live.trading212.com"
    }
  ],
  "tags": [
    {
      "description": "Tradeable instruments metadata",
      "name": "Instruments Metadata"
    },
    {
      "description": "Endpoints for managing pies",
      "name": "Pies"
    },
    {
      "description": "Order information and dispatcher",
      "name": "Equity Orders"
    },
    {
      "description": "Relevant information about your account",
      "name": "Account Data"
    },
    {
      "description": "State of your trading portfolio",
      "name": "Personal Portfolio"
    },
    {
      "description": "Reports about past events",
      "name": "Historical items"
    }
  ],
  "paths": {
    "/api/v0/equity/account/cash": {
      "get": {
        "operationId": "accountCash",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cash"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( account ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 2s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch account cash",
        "tags": ["Account Data"]
      }
    },
    "/api/v0/equity/account/info": {
      "get": {
        "operationId": "account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( account ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 30s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch account metadata",
        "tags": ["Account Data"]
      }
    },
    "/api/v0/equity/history/orders": {
      "get": {
        "operationId": "orders_1",
        "parameters": [
          {
            "description": "Pagination cursor",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Ticker filter",
            "in": "query",
            "name": "ticker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max items: 50",
            "example": 21,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseHistoricalOrder"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad filtering arguments"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( history:orders ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 6 / 1m0s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Historical order data",
        "tags": ["Historical items"]
      }
    },
    "/api/v0/equity/metadata/exchanges": {
      "get": {
        "description": "Fetch all exchanges and their corresponding working schedules that your account has access to",
        "operationId": "exchanges",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Exchange"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( metadata ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 30s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Exchange List",
        "tags": ["Instruments Metadata"]
      }
    },
    "/api/v0/equity/metadata/instruments": {
      "get": {
        "description": "Fetch all instruments that your account has access to",
        "operationId": "instruments",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TradeableInstrument"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( metadata ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 50s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Instrument List",
        "tags": ["Instruments Metadata"]
      }
    },
    "/api/v0/equity/orders": {
      "get": {
        "operationId": "orders",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:read ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 5s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch all",
        "tags": ["Equity Orders"]
      }
    },
    "/api/v0/equity/orders/limit": {
      "post": {
        "operationId": "placeLimitOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderError"
                }
              }
            },
            "description": "Failed validation"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:execute ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 2s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Place Limit order",
        "tags": ["Equity Orders"]
      }
    },
    "/api/v0/equity/orders/market": {
      "post": {
        "operationId": "placeMarketOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderError"
                }
              }
            },
            "description": "Failed validation"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:execute ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 1s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Place Market order",
        "tags": ["Equity Orders"]
      }
    },
    "/api/v0/equity/orders/stop": {
      "post": {
        "operationId": "placeStopOrder_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderError"
                }
              }
            },
            "description": "Failed validation"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:execute ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 2s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Place Stop order",
        "tags": ["Equity Orders"]
      }
    },
    "/api/v0/equity/orders/stop_limit": {
      "post": {
        "operationId": "placeStopOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopLimitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderError"
                }
              }
            },
            "description": "Failed validation"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:execute ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 2s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Place StopLimit order",
        "tags": ["Equity Orders"]
      }
    },
    "/api/v0/equity/orders/{id}": {
      "delete": {
        "operationId": "cancelOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Not available for real money accounts"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:execute ) missing for API key"
          },
          "404": {
            "description": "Order not found"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 1s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Cancel by ID",
        "tags": ["Equity Orders"]
      },
      "get": {
        "operationId": "orderById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Order found"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( orders:read ) missing for API key"
          },
          "404": {
            "description": "Order not found"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 1s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch by ID",
        "tags": ["Equity Orders"]
      }
    },
    "/api/v0/equity/pies": {
      "get": {
        "description": "Fetches all pies for the account",
        "operationId": "getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountBucketResultResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( pies:read ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 30s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch all pies",
        "tags": ["Pies"]
      },
      "post": {
        "description": "Creates a pie for the account by given params",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PieRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBucketInstrumentsDetailedResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad create request"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( pies:write ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 5s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Create pie",
        "tags": ["Pies"]
      }
    },
    "/api/v0/equity/pies/{id}": {
      "delete": {
        "description": "Deletes a pie by given id",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( pies:write ) missing for API key"
          },
          "404": {
            "description": "Pie not found"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 5s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Delete pie",
        "tags": ["Pies"]
      },
      "get": {
        "description": "Fetches a pies for the account with detailed information",
        "operationId": "getDetailed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBucketInstrumentsDetailedResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( pies:read ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 5s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch a pie",
        "tags": ["Pies"]
      },
      "post": {
        "description": "Updates a pie for the account by given params",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PieRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBucketInstrumentsDetailedResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad update request"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( pies:write ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 5s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Update pie",
        "tags": ["Pies"]
      }
    },
    "/api/v0/equity/portfolio": {
      "get": {
        "description": "Fetch an open positions for your account",
        "operationId": "portfolio",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( portfolio ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 5s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch all open positions",
        "tags": ["Personal Portfolio"]
      }
    },
    "/api/v0/equity/portfolio/{ticker}": {
      "get": {
        "description": "Fetch an open position by ticker",
        "operationId": "positionByTicker",
        "parameters": [
          {
            "example": "AAPL_US_EQ",
            "in": "path",
            "name": "ticker",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Position"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Invalid ticker supplied"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( portfolio ) missing for API key"
          },
          "404": {
            "description": "No open position with that ticker"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 1s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Fetch a specific position",
        "tags": ["Personal Portfolio"]
      }
    },
    "/api/v0/history/dividends": {
      "get": {
        "operationId": "dividends",
        "parameters": [
          {
            "description": "Pagination cursor",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Ticker filter",
            "in": "query",
            "name": "ticker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max items: 50",
            "example": 21,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseHistoryDividendItem"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad filtering arguments"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( history:dividends ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 6 / 1m0s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Paid out dividends",
        "tags": ["Historical items"]
      }
    },
    "/api/v0/history/exports": {
      "get": {
        "description": "Lists detailed information about all csv account exports",
        "operationId": "getReports",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad filtering arguments"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Missing Permissions"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 1m0s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Exports List",
        "tags": ["Historical items"]
      },
      "post": {
        "description": "Request a csv export of the account's orders, dividends and transactions history",
        "operationId": "requestReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnqueuedReportResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad filtering arguments"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Missing Permissions"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 1 / 30s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Export csv",
        "tags": ["Historical items"]
      }
    },
    "/api/v0/history/transactions": {
      "get": {
        "description": "Fetch superficial information about movements to and from your account",
        "operationId": "transactions",
        "parameters": [
          {
            "description": "Pagination cursor",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max items: 50",
            "example": 21,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseHistoryTransactionItem"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad filtering arguments"
          },
          "401": {
            "description": "Bad API key"
          },
          "403": {
            "description": "Scope( history:transactions ) missing for API key"
          },
          "408": {
            "description": "Timed-out"
          },
          "429": {
            "description": "Limited: 6 / 1m0s"
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "summary": "Transaction list",
        "tags": ["Historical items"]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "currencyCode": {
            "description": "ISO 4217",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AccountBucketDetailedResponse": {
        "properties": {
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "dividendCashAction": {
            "enum": ["REINVEST", "TO_ACCOUNT_CASH"],
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "goal": {
            "type": "number"
          },
          "icon": {
            "enum": [
              "Home",
              "PiggyBank",
              "Iceberg",
              "Airplane",
              "RV",
              "Unicorn",
              "Whale",
              "Convertable",
              "Family",
              "Coins",
              "Education",
              "BillsAndCoins",
              "Bills",
              "Water",
              "Wind",
              "Car",
              "Briefcase",
              "Medical",
              "Landscape",
              "Child",
              "Vault",
              "Travel",
              "Cabin",
              "Apartments",
              "Burger",
              "Bus",
              "Energy",
              "Factory",
              "Global",
              "Leaf",
              "Materials",
              "Pill",
              "Ring",
              "Shipping",
              "Storefront",
              "Tech",
              "Umbrella"
            ],
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "initialInvestment": {
            "type": "number"
          },
          "instrumentShares": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "pubicUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountBucketInstrumentResult": {
        "properties": {
          "currentShare": {
            "type": "number"
          },
          "expectedShare": {
            "type": "number"
          },
          "issues": {
            "items": {
              "$ref": "#/components/schemas/InstrumentIssue"
            },
            "type": "array",
            "uniqueItems": true
          },
          "ownedQuantity": {
            "type": "number"
          },
          "result": {
            "$ref": "#/components/schemas/InvestmentResult"
          },
          "ticker": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountBucketInstrumentsDetailedResponse": {
        "properties": {
          "instruments": {
            "items": {
              "$ref": "#/components/schemas/AccountBucketInstrumentResult"
            },
            "type": "array"
          },
          "settings": {
            "$ref": "#/components/schemas/AccountBucketDetailedResponse"
          }
        },
        "type": "object"
      },
      "AccountBucketResultResponse": {
        "properties": {
          "cash": {
            "description": "Amount of money put into the pie in account currency",
            "type": "number"
          },
          "dividendDetails": {
            "$ref": "#/components/schemas/DividendDetails"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "progress": {
            "description": "Progress of the pie based on the set goal",
            "example": 0.5,
            "type": "number"
          },
          "result": {
            "$ref": "#/components/schemas/InvestmentResult"
          },
          "status": {
            "description": "Status of the pie based on the set goal",
            "enum": ["AHEAD", "ON_TRACK", "BEHIND"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Cash": {
        "properties": {
          "blocked": {
            "type": "number"
          },
          "free": {
            "type": "number"
          },
          "invested": {
            "type": "number"
          },
          "pieCash": {
            "description": "Invested cash in pies",
            "type": "number"
          },
          "ppl": {
            "type": "number"
          },
          "result": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "DividendDetails": {
        "properties": {
          "gained": {
            "type": "number"
          },
          "inCash": {
            "type": "number"
          },
          "reinvested": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "DuplicateBucketRequest": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnqueuedReportResponse": {
        "properties": {
          "reportId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Exchange": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "workingSchedules": {
            "items": {
              "$ref": "#/components/schemas/WorkingSchedule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HistoricalOrder": {
        "properties": {
          "dateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "dateExecuted": {
            "format": "date-time",
            "type": "string"
          },
          "dateModified": {
            "format": "date-time",
            "type": "string"
          },
          "executor": {
            "enum": ["API", "IOS", "ANDROID", "WEB", "SYSTEM", "AUTOINVEST"],
            "type": "string"
          },
          "fillCost": {
            "description": "In the instrument currency",
            "type": "number"
          },
          "fillId": {
            "format": "int64",
            "type": "integer"
          },
          "fillPrice": {
            "description": "In the instrument currency",
            "type": "number"
          },
          "fillResult": {
            "type": "number"
          },
          "fillType": {
            "enum": ["TOTV", "OTC"],
            "type": "string"
          },
          "filledQuantity": {
            "description": "Applicable to quantity orders",
            "type": "number"
          },
          "filledValue": {
            "description": "Applicable to value orders",
            "type": "number"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "limitPrice": {
            "description": "Applicable to limit orders",
            "type": "number"
          },
          "orderedQuantity": {
            "description": "Applicable to quantity orders",
            "type": "number"
          },
          "orderedValue": {
            "description": "Applicable to value orders",
            "type": "number"
          },
          "parentOrder": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "enum": [
              "LOCAL",
              "UNCONFIRMED",
              "CONFIRMED",
              "NEW",
              "CANCELLING",
              "CANCELLED",
              "PARTIALLY_FILLED",
              "FILLED",
              "REJECTED",
              "REPLACING",
              "REPLACED"
            ],
            "type": "string"
          },
          "stopPrice": {
            "description": "Applicable to stop orders",
            "type": "number"
          },
          "taxes": {
            "items": {
              "$ref": "#/components/schemas/Tax"
            },
            "type": "array"
          },
          "ticker": {
            "type": "string"
          },
          "timeValidity": {
            "description": "Applicable to stop, limit and stopLimit orders",
            "enum": ["DAY", "GTC"],
            "type": "string"
          },
          "type": {
            "enum": ["LIMIT", "STOP", "MARKET", "STOP_LIMIT"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HistoryDividendItem": {
        "properties": {
          "amount": {
            "description": "In instrument currency",
            "type": "number"
          },
          "amountInEuro": {
            "type": "number"
          },
          "grossAmountPerShare": {
            "description": "In instrument currency",
            "type": "number"
          },
          "paidOn": {
            "format": "date-time",
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "reference": {
            "type": "string"
          },
          "ticker": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ORDINARY",
              "BONUS",
              "PROPERTY_INCOME",
              "RETURN_OF_CAPITAL_NON_US",
              "DEMERGER",
              "INTEREST",
              "CAPITAL_GAINS_DISTRIBUTION_NON_US",
              "INTERIM_LIQUIDATION",
              "ORDINARY_MANUFACTURED_PAYMENT",
              "BONUS_MANUFACTURED_PAYMENT",
              "PROPERTY_INCOME_MANUFACTURED_PAYMENT",
              "RETURN_OF_CAPITAL_NON_US_MANUFACTURED_PAYMENT",
              "DEMERGER_MANUFACTURED_PAYMENT",
              "INTEREST_MANUFACTURED_PAYMENT",
              "CAPITAL_GAINS_DISTRIBUTION_NON_US_MANUFACTURED_PAYMENT",
              "INTERIM_LIQUIDATION_MANUFACTURED_PAYMENT",
              "INTEREST_PAID_BY_US_OBLIGORS",
              "INTEREST_PAID_BY_FOREIGN_CORPORATIONS",
              "DIVIDENDS_PAID_BY_US_CORPORATIONS",
              "DIVIDENDS_PAID_BY_FOREIGN_CORPORATIONS",
              "CAPITAL_GAINS",
              "REAL_PROPERTY_INCOME_AND_NATURAL_RESOURCES_ROYALTIES",
              "OTHER_INCOME",
              "QUALIFIED_INVESTMENT_ENTITY",
              "TRUST_DISTRIBUTION",
              "PUBLICLY_TRADED_PARTNERSHIP_DISTRIBUTION",
              "CAPITAL_GAINS_DISTRIBUTION",
              "RETURN_OF_CAPITAL",
              "OTHER_DIVIDEND_EQUIVALENT",
              "TAX_EVENT_1446F_FOR_PUBLICLY_TRADED_SECURITIES",
              "PTP_UNCHARACTERISED_INCOME",
              "MULTIPLE_1042S_TAX_COMPONENTS",
              "INTEREST_PAID_BY_US_OBLIGORS_MANUFACTURED_PAYMENT",
              "INTEREST_PAID_BY_FOREIGN_CORPORATIONS_MANUFACTURED_PAYMENT",
              "DIVIDENDS_PAID_BY_US_CORPORATIONS_MANUFACTURED_PAYMENT",
              "DIVIDENDS_PAID_BY_FOREIGN_CORPORATIONS_MANUFACTURED_PAYMENT",
              "CAPITAL_GAINS_MANUFACTURED_PAYMENT",
              "REAL_PROPERTY_INCOME_AND_NATURAL_RESOURCES_ROYALTIES_MANUFACTURED_PAYMENT",
              "OTHER_INCOME_MANUFACTURED_PAYMENT",
              "QUALIFIED_INVESTMENT_ENTITY_MANUFACTURED_PAYMENT",
              "TRUST_DISTRIBUTION_MANUFACTURED_PAYMENT",
              "PUBLICLY_TRADED_PARTNERSHIP_DISTRIBUTION_MANUFACTURED_PAYMENT",
              "CAPITAL_GAINS_DISTRIBUTION_MANUFACTURED_PAYMENT",
              "RETURN_OF_CAPITAL_MANUFACTURED_PAYMENT",
              "OTHER_DIVIDEND_EQUIVALENT_MANUFACTURED_PAYMENT",
              "TAX_EVENT_1446F_FOR_PUBLICLY_TRADED_SECURITIES_MANUFACTURED_PAYMENT",
              "PTP_UNCHARACTERISED_INCOME_MANUFACTURED_PAYMENT",
              "MULTIPLE_1042S_TAX_COMPONENTS_MANUFACTURED_PAYMENT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HistoryTransactionItem": {
        "properties": {
          "amount": {
            "description": "In the account currency",
            "type": "number"
          },
          "dateTime": {
            "format": "date-time",
            "type": "string"
          },
          "reference": {
            "description": "ID",
            "type": "string"
          },
          "type": {
            "enum": ["WITHDRAW", "DEPOSIT", "FEE", "TRANSFER"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "InstrumentIssue": {
        "properties": {
          "name": {
            "enum": [
              "DELISTED",
              "SUSPENDED",
              "NO_LONGER_TRADABLE",
              "MAX_POSITION_SIZE_REACHED",
              "APPROACHING_MAX_POSITION_SIZE",
              "COMPLEX_INSTRUMENT_APP_TEST_REQUIRED"
            ],
            "type": "string"
          },
          "severity": {
            "enum": ["IRREVERSIBLE", "REVERSIBLE", "INFORMATIVE"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvestmentResult": {
        "properties": {
          "investedValue": {
            "type": "number"
          },
          "result": {
            "type": "number"
          },
          "resultCoef": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "LimitRequest": {
        "properties": {
          "limitPrice": {
            "example": 100.23,
            "type": "number"
          },
          "quantity": {
            "example": 0.1,
            "type": "number"
          },
          "ticker": {
            "example": "AAPL_US_EQ",
            "type": "string"
          },
          "timeValidity": {
            "description": "Expiration",
            "enum": ["DAY", "GTC"],
            "example": "DAY",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MarketRequest": {
        "properties": {
          "quantity": {
            "example": 0.1,
            "type": "number"
          },
          "ticker": {
            "example": "AAPL_US_EQ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Order": {
        "properties": {
          "creationTime": {
            "format": "date-time",
            "type": "string"
          },
          "filledQuantity": {
            "description": "Applicable to quantity orders",
            "type": "number"
          },
          "filledValue": {
            "description": "Applicable to value orders",
            "type": "number"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "limitPrice": {
            "description": "Applicable to LIMIT and STOP_LIMIT orders",
            "type": "number"
          },
          "quantity": {
            "description": "Applicable to quantity orders",
            "type": "number"
          },
          "status": {
            "enum": [
              "LOCAL",
              "UNCONFIRMED",
              "CONFIRMED",
              "NEW",
              "CANCELLING",
              "CANCELLED",
              "PARTIALLY_FILLED",
              "FILLED",
              "REJECTED",
              "REPLACING",
              "REPLACED"
            ],
            "type": "string"
          },
          "stopPrice": {
            "description": "Applicable to STOP and STOP_LIMIT orders",
            "type": "number"
          },
          "strategy": {
            "enum": ["QUANTITY", "VALUE"],
            "type": "string"
          },
          "ticker": {
            "description": "Unique instrument identifier. Get from the /instruments endpoint",
            "example": "AAPL_US_EQ",
            "type": "string"
          },
          "type": {
            "enum": ["LIMIT", "STOP", "MARKET", "STOP_LIMIT"],
            "type": "string"
          },
          "value": {
            "description": "Applicable to value orders",
            "type": "number"
          }
        },
        "type": "object"
      },
      "PaginatedResponseHistoricalOrder": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HistoricalOrder"
            },
            "type": "array"
          },
          "nextPagePath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginatedResponseHistoryDividendItem": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HistoryDividendItem"
            },
            "type": "array"
          },
          "nextPagePath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginatedResponseHistoryTransactionItem": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HistoryTransactionItem"
            },
            "type": "array"
          },
          "nextPagePath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PieRequest": {
        "properties": {
          "dividendCashAction": {
            "enum": ["REINVEST", "TO_ACCOUNT_CASH"],
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "goal": {
            "type": "number"
          },
          "icon": {
            "enum": [
              "Home",
              "PiggyBank",
              "Iceberg",
              "Airplane",
              "RV",
              "Unicorn",
              "Whale",
              "Convertable",
              "Family",
              "Coins",
              "Education",
              "BillsAndCoins",
              "Bills",
              "Water",
              "Wind",
              "Car",
              "Briefcase",
              "Medical",
              "Landscape",
              "Child",
              "Vault",
              "Travel",
              "Cabin",
              "Apartments",
              "Burger",
              "Bus",
              "Energy",
              "Factory",
              "Global",
              "Leaf",
              "Materials",
              "Pill",
              "Ring",
              "Shipping",
              "Storefront",
              "Tech",
              "Umbrella"
            ],
            "type": "string"
          },
          "instrumentShares": {
            "additionalProperties": {
              "type": "number"
            },
            "example": {
              "AAPL_US_EQ": 0.5,
              "MSFT_US_EQ": 0.5
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaceOrderError": {
        "properties": {
          "clarification": {
            "type": "string"
          },
          "code": {
            "enum": [
              "SellingEquityNotOwned",
              "CantLegalyTradeException",
              "InsufficientResources",
              "InsufficientValueForStocksSell",
              "TargetPriceTooFar",
              "TargetPriceTooClose",
              "NotEligibleForISA",
              "ShareLendingAgreementNotAccepted",
              "InstrumentNotFound",
              "MaxEquityBuyQuantityExceeded",
              "MaxEquitySellQuantityExceeded",
              "LimitPriceMissing",
              "StopPriceMissing",
              "TickerMissing",
              "QuantityMissing",
              "MaxQuantityExceeded",
              "InvalidValue",
              "InsufficientFreeForStocksException",
              "MinValueExceeded",
              "MinQuantityExceeded",
              "PriceTooFar",
              "UNDEFINED",
              "NotAvailableForRealMoneyAccounts"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Position": {
        "properties": {
          "averagePrice": {
            "type": "number"
          },
          "currentPrice": {
            "type": "number"
          },
          "frontend": {
            "description": "Origin",
            "enum": ["API", "IOS", "ANDROID", "WEB", "SYSTEM", "AUTOINVEST"],
            "type": "string"
          },
          "fxPpl": {
            "description": "Forex movement impact, only applies to positions with instrument currency that differs from the accounts'",
            "type": "number"
          },
          "initialFillDate": {
            "format": "date-time",
            "type": "string"
          },
          "maxBuy": {
            "description": "Additional quantity that can be bought",
            "type": "number"
          },
          "maxSell": {
            "description": "Quantity that can be sold",
            "type": "number"
          },
          "pieQuantity": {
            "description": "Invested in pies",
            "type": "number"
          },
          "ppl": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "ticker": {
            "description": "Unique instrument identifier",
            "example": "AAPL_US_EQ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicReportRequest": {
        "properties": {
          "dataIncluded": {
            "$ref": "#/components/schemas/ReportDataIncluded"
          },
          "timeFrom": {
            "format": "date-time",
            "type": "string"
          },
          "timeTo": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportDataIncluded": {
        "properties": {
          "includeDividends": {
            "type": "boolean"
          },
          "includeInterest": {
            "type": "boolean"
          },
          "includeOrders": {
            "type": "boolean"
          },
          "includeTransactions": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportResponse": {
        "properties": {
          "dataIncluded": {
            "$ref": "#/components/schemas/ReportDataIncluded"
          },
          "downloadLink": {
            "type": "string"
          },
          "reportId": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "enum": ["Queued", "Processing", "Running", "Canceled", "Failed", "Finished"],
            "type": "string"
          },
          "timeFrom": {
            "format": "date-time",
            "type": "string"
          },
          "timeTo": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StopLimitRequest": {
        "properties": {
          "limitPrice": {
            "example": 100.23,
            "type": "number"
          },
          "quantity": {
            "example": 0.1,
            "type": "number"
          },
          "stopPrice": {
            "example": 100.23,
            "type": "number"
          },
          "ticker": {
            "example": "AAPL_US_EQ",
            "type": "string"
          },
          "timeValidity": {
            "description": "Expiration",
            "enum": ["DAY", "GTC"],
            "example": "DAY",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StopRequest": {
        "properties": {
          "quantity": {
            "example": 0.1,
            "type": "number"
          },
          "stopPrice": {
            "example": 100.23,
            "type": "number"
          },
          "ticker": {
            "example": "AAPL_US_EQ",
            "type": "string"
          },
          "timeValidity": {
            "description": "Expiration",
            "enum": ["DAY", "GTC"],
            "example": "DAY",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tax": {
        "properties": {
          "fillId": {
            "type": "string"
          },
          "name": {
            "enum": [
              "COMMISSION_TURNOVER",
              "CURRENCY_CONVERSION_FEE",
              "FINRA_FEE",
              "FRENCH_TRANSACTION_TAX",
              "PTM_LEVY",
              "STAMP_DUTY",
              "STAMP_DUTY_RESERVE_TAX",
              "TRANSACTION_FEE"
            ],
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "timeCharged": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeEvent": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "enum": [
              "OPEN",
              "CLOSE",
              "BREAK_START",
              "BREAK_END",
              "PRE_MARKET_OPEN",
              "AFTER_HOURS_OPEN",
              "AFTER_HOURS_CLOSE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TradeableInstrument": {
        "properties": {
          "addedOn": {
            "description": "On the platform since",
            "format": "date-time",
            "type": "string"
          },
          "currencyCode": {
            "description": "ISO 4217",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "isin": {
            "type": "string"
          },
          "maxOpenQuantity": {
            "type": "number"
          },
          "minTradeQuantity": {
            "description": "A single order must be equal to or exceed this value",
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "shortname": {
            "type": "string"
          },
          "ticker": {
            "description": "Unique identifier",
            "example": "AAPL_US_EQ",
            "type": "string"
          },
          "type": {
            "enum": [
              "CRYPTOCURRENCY",
              "ETF",
              "FOREX",
              "FUTURES",
              "INDEX",
              "STOCK",
              "WARRANT",
              "CRYPTO",
              "CVR",
              "CORPACT"
            ],
            "example": "ETF",
            "type": "string"
          },
          "workingScheduleId": {
            "description": "Get items in the /exchanges endpoint",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WorkingSchedule": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "timeEvents": {
            "items": {
              "$ref": "#/components/schemas/TimeEvent"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}
